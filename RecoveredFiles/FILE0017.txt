Class::Data::InheritablUes(e3rpmC)ontributed Perl DocumeCnltaastsi:o:nData::Inheritable(3pm)



NNAAMMEE
       Class::Data::Inheritable - Inheritable, overridable class data

SSYYNNOOPPSSIISS
         package Stuff;
         use base qw(Class::Data::Inheritable);

         # Set up DataFile as inheritable class data.
         Stuff->mk_classdata('DataFile');

         # Declare the location of the data file for this class.
         Stuff->DataFile('/etc/stuff/data');

         # Or, all in one shot:
         Stuff->mk_classdata(DataFile => '/etc/stuff/data');

DDEESSCCRRIIPPTTIIOONN
       Class::Data::Inheritable is for creating accessor/mutators to class
       data.  That is, if you want to store something about your class as a
       whole (instead of about a single object).  This data is then inherited
       by your subclasses and can be overridden.

       For example:

         Pere::Ubu->mk_classdata('Suitcase');

       will generate the method _S_u_i_t_c_a_s_e_(_) in the class Pere::Ubu.

       This new method can be used to get and set a piece of class data.

         Pere::Ubu->Suitcase('Red');
         $suitcase = Pere::Ubu->Suitcase;

       The interesting part happens when a class inherits from Pere::Ubu:

         package Raygun;
         use base qw(Pere::Ubu);

         # Raygun's suitcase is Red.
         $suitcase = Raygun->Suitcase;

       Raygun inherits its Suitcase class data from Pere::Ubu.

       Inheritance of class data works analogous to method inheritance.  As
       long as Raygun does not "override" its inherited class data (by using
       _S_u_i_t_c_a_s_e_(_) to set a new value) it will continue to use whatever is set
       in Pere::Ubu and inherit further changes:

         # Both Raygun's and Pere::Ubu's suitcases are now Blue
         Pere::Ubu->Suitcase('Blue');

       However, should Raygun decide to set its own _S_u_i_t_c_a_s_e_(_) it has now
       "overridden" Pere::Ubu and is on its own, just like if it had
       overridden a method:

         # Raygun has an orange suitcase, Pere::Ubu's is still Blue.
         Raygun->Suitcase('Orange');

       Now that Raygun has overridden Pere::Ubu further changes by Pere::Ubu
       no longer effect Raygun.

         # Raygun still has an orange suitcase, but Pere::Ubu is using Samsonite.
         Pere::Ubu->Suitcase('Samsonite');

MMeetthhooddss
   mmkk__ccllaassssddaattaa
         Class->mk_classdata($data_accessor_name);
         Class->mk_classdata($data_accessor_name => $value);

       This is a class method used to declare new class data accessors.  A new
       accessor will be created in the Class using the name from
       $data_accessor_name, and optionally initially setting it to the given
       value.

       To facilitate overriding, mk_classdata creates an alias to the
       accessor, ___f_i_e_l_d___a_c_c_e_s_s_o_r_(_).  So _S_u_i_t_c_a_s_e_(_) would have an alias
       ___S_u_i_t_c_a_s_e___a_c_c_e_s_s_o_r_(_) that does the exact same thing as _S_u_i_t_c_a_s_e_(_).
       This is useful if you want to alter the behavior of a single accessor
       yet still get the benefits of inheritable class data.  For example.

         sub Suitcase {
             my($self) = shift;
             warn "Fashion tragedy" if @_ and $_[0] eq 'Plaid';

             $self->_Suitcase_accessor(@_);
         }

AAUUTTHHOORR
       Original code by Damian Conway.

       Maintained by Michael G Schwern until September 2005.

       Now maintained by Tony Bowden.

BBUUGGSS aanndd QQUUEERRIIEESS
       Please direct all correspondence regarding this module to:
         bug-Class-Data-Inheritable@rt.cpan.org

CCOOPPYYRRIIGGHHTT aanndd LLIICCEENNSSEE
       Copyright (c) 2000-2005, Damian Conway and Michael G Schwern.  All
       Rights Reserved.

       This module is free software. It may be used, redistributed and/or
       modified under the same terms as Perl itself.

SSEEEE AALLSSOO
       perltooc has a very elaborate discussion of class data in Perl.



perl v5.26.2                      2018-08-25     Class::Data::Inheritable(3pm)
ee567df331e84bab1774552ad701b84f288204a6f2180bbc0520773e271b3621
