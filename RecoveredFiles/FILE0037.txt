EVP_KDF-SSHKDF(7SSL)                OpenSSL               EVP_KDF-SSHKDF(7SSL)



NNAAMMEE
       EVP_KDF-SSHKDF - The SSHKDF EVP_KDF implementation

DDEESSCCRRIIPPTTIIOONN
       Support for computing the SSSSHHKKDDFF KDF through the EEVVPP__KKDDFF API.

       The EVP_KDF-SSHKDF algorithm implements the SSHKDF key derivation
       function.  It is defined in RFC 4253, section 7.2 and is used by SSH to
       derive IVs, encryption keys and integrity keys.  Five inputs are
       required to perform key derivation: The hashing function (for example
       SHA256), the Initial Key, the Exchange Hash, the Session ID, and the
       derivation key type.

   IIddeennttiittyy
       "SSHKDF" is the name for this implementation; it can be used with the
       EEVVPP__KKDDFF__ffeettcchh(()) function.

   SSuuppppoorrtteedd ppaarraammeetteerrss
       The supported parameters are:

       "properties" (OOSSSSLL__KKDDFF__PPAARRAAMM__PPRROOPPEERRTTIIEESS) <UTF8 string>
       "digest" (OOSSSSLL__KKDDFF__PPAARRAAMM__DDIIGGEESSTT) <UTF8 string>
       "key" (OOSSSSLL__KKDDFF__PPAARRAAMM__KKEEYY) <octet string>
           These parameters work as described in "PARAMETERS" in EEVVPP__KKDDFF(3).

       "xcghash" (OOSSSSLL__KKDDFF__PPAARRAAMM__SSSSHHKKDDFF__XXCCGGHHAASSHH) <octet string>
       "session_id" (OOSSSSLL__KKDDFF__PPAARRAAMM__SSSSHHKKDDFF__SSEESSSSIIOONN__IIDD) <octet string>
           These parameters set the respective values for the KDF.  If a value
           is already set, the contents are replaced.

       "type" (OOSSSSLL__KKDDFF__PPAARRAAMM__SSSSHHKKDDFF__TTYYPPEE) <UTF8 string>
           This parameter sets the type for the SSHKDF operation.  There are
           six supported types:

           EVP_KDF_SSHKDF_TYPE_INITIAL_IV_CLI_TO_SRV
               The Initial IV from client to server.  A single char of value
               65 (ASCII char 'A').

           EVP_KDF_SSHKDF_TYPE_INITIAL_IV_SRV_TO_CLI
               The Initial IV from server to client A single char of value 66
               (ASCII char 'B').

           EVP_KDF_SSHKDF_TYPE_ENCRYPTION_KEY_CLI_TO_SRV
               The Encryption Key from client to server A single char of value
               67 (ASCII char 'C').

           EVP_KDF_SSHKDF_TYPE_ENCRYPTION_KEY_SRV_TO_CLI
               The Encryption Key from server to client A single char of value
               68 (ASCII char 'D').

           EVP_KDF_SSHKDF_TYPE_INTEGRITY_KEY_CLI_TO_SRV
               The Integrity Key from client to server A single char of value
               69 (ASCII char 'E').

           EVP_KDF_SSHKDF_TYPE_INTEGRITY_KEY_SRV_TO_CLI
               The Integrity Key from client to server A single char of value
               70 (ASCII char 'F').

NNOOTTEESS
       A context for SSHKDF can be obtained by calling:

        EVP_KDF *kdf = EVP_KDF_fetch(NULL, "SSHKDF", NULL);
        EVP_KDF_CTX *kctx = EVP_KDF_CTX_new(kdf);

       The output length of the SSHKDF derivation is specified via the _k_e_y_l_e_n
       parameter to the EEVVPP__KKDDFF__ddeerriivvee(3) function.  Since the SSHKDF output
       length is variable, calling EEVVPP__KKDDFF__CCTTXX__ggeett__kkddff__ssiizzee(3) to obtain the
       requisite length is not meaningful. The caller must allocate a buffer
       of the desired length, and pass that buffer to the EEVVPP__KKDDFF__ddeerriivvee(3)
       function along with the desired length.

EEXXAAMMPPLLEESS
       This example derives an 8 byte IV using SHA-256 with a 1K "key" and
       appropriate "xcghash" and "session_id" values:

        EVP_KDF *kdf;
        EVP_KDF_CTX *kctx;
        const char type = EVP_KDF_SSHKDF_TYPE_INITIAL_IV_CLI_TO_SRV;
        unsigned char key[1024] = "01234...";
        unsigned char xcghash[32] = "012345...";
        unsigned char session_id[32] = "012345...";
        unsigned char out[8];
        size_t outlen = sizeof(out);
        OSSL_PARAM params[6], *p = params;

        kdf = EVP_KDF_fetch(NULL, "SSHKDF", NULL);
        kctx = EVP_KDF_CTX_new(kdf);
        EVP_KDF_free(kdf);

        *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST,
                                                SN_sha256, strlen(SN_sha256));
        *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_KEY,
                                                 key, (size_t)1024);
        *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SSHKDF_XCGHASH,
                                                 xcghash, (size_t)32);
        *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SSHKDF_SESSION_ID,
                                                 session_id, (size_t)32);
        *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_SSHKDF_TYPE,
                                                &type, sizeof(type));
        *p = OSSL_PARAM_construct_end();
        if (EVP_KDF_derive(kctx, out, &outlen, params) <= 0)
            /* Error */

CCOONNFFOORRMMIINNGG TTOO
       RFC 4253

SSEEEE AALLSSOO
       EEVVPP__KKDDFF(3), EEVVPP__KKDDFF__CCTTXX__nneeww(3), EEVVPP__KKDDFF__CCTTXX__ffrreeee(3),
       EEVVPP__KKDDFF__CCTTXX__sseett__ppaarraammss(3), EEVVPP__KKDDFF__CCTTXX__ggeett__kkddff__ssiizzee(3),
       EEVVPP__KKDDFF__ddeerriivvee(3), "PARAMETERS" in EEVVPP__KKDDFF(3)

CCOOPPYYRRIIGGHHTT
       Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.2                             2023-02-06              EVP_KDF-SSHKDF(7SSL)
0ce834edcf5ecd93315549f4b399e87f0c517f2d49afcc8cc56f75efc913cf79
