EVP_KDF-TLS1_PRF(7SSL)              OpenSSL             EVP_KDF-TLS1_PRF(7SSL)



NNAAMMEE
       EVP_KDF-TLS1_PRF - The TLS1 PRF EVP_KDF implementation

DDEESSCCRRIIPPTTIIOONN
       Support for computing the TTLLSS11 PRF through the EEVVPP__KKDDFF API.

       The EVP_KDF-TLS1_PRF algorithm implements the PRF used by TLS versions
       up to and including TLS 1.2.

   IIddeennttiittyy
       "TLS1-PRF" is the name for this implementation; it can be used with the
       EEVVPP__KKDDFF__ffeettcchh(()) function.

   SSuuppppoorrtteedd ppaarraammeetteerrss
       The supported parameters are:

       "properties" (OOSSSSLL__KKDDFF__PPAARRAAMM__PPRROOPPEERRTTIIEESS) <UTF8 string>
       "digest" (OOSSSSLL__KKDDFF__PPAARRAAMM__DDIIGGEESSTT) <UTF8 string>
           These parameters work as described in "PARAMETERS" in EEVVPP__KKDDFF(3).

           The OOSSSSLL__KKDDFF__PPAARRAAMM__DDIIGGEESSTT parameter is used to set the message
           digest associated with the TLS PRF.  EEVVPP__mmdd55__sshhaa11(()) is treated as a
           special case which uses the PRF algorithm using both MMDD55 and SSHHAA11
           as used in TLS 1.0 and 1.1.

       "secret" (OOSSSSLL__KKDDFF__PPAARRAAMM__SSEECCRREETT) <octet string>
           This parameter sets the secret value of the TLS PRF.  Any existing
           secret value is replaced.

       "seed" (OOSSSSLL__KKDDFF__PPAARRAAMM__SSEEEEDD) <octet string>
           This parameter sets the context seed.  The length of the context
           seed cannot exceed 1024 bytes; this should be more than enough for
           any normal use of the TLS PRF.

NNOOTTEESS
       A context for the TLS PRF can be obtained by calling:

        EVP_KDF *kdf = EVP_KDF_fetch(NULL, "TLS1-PRF", NULL);
        EVP_KDF_CTX *kctx = EVP_KDF_CTX_new(kdf);

       The digest, secret value and seed must be set before a key is derived
       otherwise an error will occur.

       The output length of the PRF is specified by the _k_e_y_l_e_n parameter to
       the EEVVPP__KKDDFF__ddeerriivvee(()) function.

EEXXAAMMPPLLEESS
       This example derives 10 bytes using SHA-256 with the secret key
       "secret" and seed value "seed":

        EVP_KDF *kdf;
        EVP_KDF_CTX *kctx;
        unsigned char out[10];
        OSSL_PARAM params[4], *p = params;

        kdf = EVP_KDF_fetch(NULL, "TLS1-PRF", NULL);
        kctx = EVP_KDF_CTX_new(kdf);
        EVP_KDF_free(kdf);

        *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST,
                                                SN_sha256, strlen(SN_sha256));
        *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SECRET,
                                                 "secret", (size_t)6);
        *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SEED,
                                                 "seed", (size_t)4);
        *p = OSSL_PARAM_construct_end();
        if (EVP_KDF_derive(kctx, out, sizeof(out), params) <= 0) {
            error("EVP_KDF_derive");
        }
        EVP_KDF_CTX_free(kctx);

CCOONNFFOORRMMIINNGG TTOO
       RFC 2246, RFC 5246 and NIST SP 800-135 r1

SSEEEE AALLSSOO
       EEVVPP__KKDDFF(3), EEVVPP__KKDDFF__CCTTXX__nneeww(3), EEVVPP__KKDDFF__CCTTXX__ffrreeee(3),
       EEVVPP__KKDDFF__CCTTXX__sseett__ppaarraammss(3), EEVVPP__KKDDFF__ddeerriivvee(3), "PARAMETERS" in
       EEVVPP__KKDDFF(3)

CCOOPPYYRRIIGGHHTT
       Copyright 2018-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.2                             2023-02-06            EVP_KDF-TLS1_PRF(7SSL)
513a440cb34b24d151aceeb0395f3e6c8a8a644bc4b9f5949c6169d8ec12a0c1
